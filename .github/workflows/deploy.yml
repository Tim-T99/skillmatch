name: Deploy Skillmatch App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app
        run: npm run build -- --configuration production
        env:
          NODE_OPTIONS: --max_old_space_size=4096

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: skillmatch-dist
          path: dist/skillmatch/
          retention-days: 7

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: skillmatch-dist
          path: dist/skillmatch/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Deploy to S3
        run: |
          aws s3 sync dist/skillmatch/browser/ s3://${{ secrets.AWS_S3_BUCKET }}/ --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        working-directory: backend

      - name: Build TypeScript
        run: npm run build
        working-directory: backend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build, tag, and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/skillmatch-backend:latest

  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Test network connectivity
        run: |
          echo "Pinging EC2 host: ${{ secrets.EC2_HOST }}"
          ping -c 4 ${{ secrets.EC2_HOST }} || echo "Ping failed, host may be unreachable"
          echo "Checking SSH port 22"
          nc -zv ${{ secrets.EC2_HOST }} 22 || echo "Port 22 is closed or unreachable"
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Connected to EC2"
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/skillmatch-backend:latest
            docker stop skillmatch-backend || true
            docker rm skillmatch-backend || true
            docker run -d \
              --name skillmatch-backend \
              -p 3000:3000 \
              -e DB_HOST=database-1.clasacgwqr7b.eu-north-1.rds.amazonaws.com \
              -e DB_PORT=5432 \
              -e DB_NAME=postgres \
              -e DB_USER=sa \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e PORT=3000 \
              -e ALLOWED_ORIGINS=http://skillmatch25.s3-website.eu-north-1.amazonaws.com \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }} \
              -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
              --restart unless-stopped \
              ${{ secrets.DOCKERHUB_USERNAME }}/skillmatch-backend:latest
            echo "Deployment completed"
          EOF
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}